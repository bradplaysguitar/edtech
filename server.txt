const express = require('express');
const axios = require('axios');
const { google } = require('googleapis');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3000;

app.use(bodyParser.json());

const sheets = google.sheets('v4');
const SPREADSHEET_ID = '1rsKHqq3an1IyX7l1AM8rph8uuVzJunA-z8uU2csptag';
const RANGE = 'Sheet1!B2:B5000'; // Adjust based on your sheet's name and range
const OPENAI_API_KEY = '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';
async function fetchResponsesFromSpreadsheet() {
  try {
    // Set up the API
    const auth = new google.auth.GoogleAuth({
      scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
    });
    const authClient = await auth.getClient();

    // Fetch the responses
    const response = await sheets.spreadsheets.values.get({
      auth: authClient,
      spreadsheetId: SPREADSHEET_ID,
      range: RANGE,
    });

    // Check if the response has data and return it, or return an empty array if no data is found
    if (response.data.values && response.data.values.length > 0) {
      return response.data.values.flat();
    } else {
      console.log('No responses found in the specified range.');
      return [];
    }
  } catch (error) {
    console.error('Error fetching responses from spreadsheet:', error);
    throw error; // Re-throw the error to be handled by the calling function
  }
}

  // Return the responses as an array of strings
  return response.data.values.flat();
}

app.post('/generate-definition', async (req, res) => {
  try {
    const responses = await fetchResponsesFromSpreadsheet();
    const prompt = `Given the following user responses, provide an updated definition of constructivism:\n\n${responses.join('\n')}`;

    const openAIResponse = await axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {
      prompt: prompt,
      max_tokens: 150
    }, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      }
    });

    const updatedDefinition = openAIResponse.data.choices[0].text.trim();
    res.json({ updatedDefinition });
  } catch (error) {
    console.error('Error generating definition:', error);
    res.status(500).send('Internal Server Error');
  }
});

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
